{"version":3,"sources":["src/mocks/api.js","src/events.js","src/loader.js","src/app.js"],"names":["FAKE_OPTS","poster","title","description","FAKE_SRC","src","opts","ERROR_MESSAGES","response","Promise","resolve","Math","random","ok","err","fake_error","message","floor","length","OK","ERR","MY_CUSTOM_TYPE","my_loader","root","video","arguments","be_normal_plugin","load_from_my_ovp","wants","_","console","log","type","on","APIEvents","e","data","setSrc","setOpts","emit","flowplayer","events","ERROR","API","then","Error","my_ovp_src","token"],"mappings":"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","file":"app.69d3a46e.js","sourceRoot":"../../demos/loader","sourcesContent":["/**\n * this will return a valid `flowplayer()` configuration object\n * more often than not though, you may need to transform your\n * API response\n */\nconst FAKE_OPTS =\n  { poster      : \"https://source.unsplash.com/random\"\n  , title       : \"my ovp / fake\"\n  , description : \"this was loaded from a mocked API\"\n  }\n\nconst FAKE_SRC = \n  { src  : [\"https://edge.flowplayer.org/starwreck/hls/playlist.m3u8\"]\n  , opts : FAKE_OPTS\n  }\n/**\n * a bunch of fake error messages just for illustration\n */\nconst ERROR_MESSAGES =\n  [ \"api not available\"\n  , \"media not found\"\n  , \"content not available in your region\"\n  , \"you have reached maximum free views per month\"\n  ]\n\n/**\n * this is a mock API response from some OVP platform\n * to illustrate the asynchronous loading of data\n */\nexport const response = ()=> Promise.resolve(Math.random() > 0.2 ? {ok: FAKE_SRC} : {err: fake_error()})\n/**\n * get a fake error message just for demonstration purposes\n * because Error handling is **always** important\n */\nconst fake_error = ()=> ({message: ERROR_MESSAGES[Math.floor(Math.random() * ERROR_MESSAGES.length)]})","/**\n * this is an example event based logical branching\n * it is a good idea to isolate your branches to events \n * so that it's easier to handle separation of concerns\n * as integrations grow\n */\nexport const OK  = \"my_api:ok\"\nexport const ERR = \"my_api:err\"","import * as API from \"./mocks/api\"\nimport * as APIEvents from \"./events\"\n/**\n * it's a good idea to define this token as a constant you\n * can reference from anywhere in your application\n */\nexport const MY_CUSTOM_TYPE = \"my-ovp/id\"\n/**\n * loader plugins can determine their current state by the \n * arity of the Arguments passed to them:\n * \n * 3 arguments == normal plugin state\n * 4 arguments == loading a custom src\n * \n * loader plugins must also implement a `.wants` function\n * so that `flowplayer()` can tell if this plugin wants\n * to intercept the src or not \n */\nexport function my_loader (opts, root, video, src) {\n  if (arguments.length == 3) be_normal_plugin(opts, root, video)\n  if (arguments.length == 4) load_from_my_ovp(video, src)\n}\n/**\n * all loader plugins expose a `wants` function that accepts a \n * src object and returns true/false depending on if they want to\n * intercept the loading call\n */\nmy_loader.wants = (_, src) => {\n  console.log(\"my_loader.wants(src: %o) -> %o\", src, src.type == MY_CUSTOM_TYPE)\n  return src.type == MY_CUSTOM_TYPE\n}\n/**\n * if the arity is 3 we are just in \"normal\" mode\n */\nfunction be_normal_plugin (opts, root, video) {\n  /**\n   * by passing the loading response back tot he \"normal\" context\n   * we can be sure that all of the flowplayer UI exists and everything\n   * has been loaded\n   * \n   * utilizing the Event-based organization structure will also lead to \n   * much more maintainable code (and is how Flowplayer is organized internally)\n   */\n  video.on(APIEvents.OK, function (e) {\n    // we are just using a basic setSrc here, but you could also call\n    // any of the other player api methods like `setOpts`\n    console.log(\"Event(type: %s, data: %o)\", e.type, e.data)\n    if (e.data.src)  video.setSrc(e.data.src)\n    if (e.data.opts) video.setOpts(e.data.opts)\n  })\n\n  video.on(APIEvents.ERR, function (e) {\n    const err = e.data\n    // this would be a great place to add your own error tracking if necessary.\n    // no example for HTTP demos is complete without error handling!\n    console.log(\"Event(type: %s, data: %o)\", e.type, e.data)\n    video.emit(flowplayer.events.ERROR, err)\n  })\n}\n/**\n * if the arity was 4 we are in the \"loader\" mode\n * and should attempt to load this src from our API\n */\nfunction load_from_my_ovp (video, src) {\n  console.log(\"my_loader.load_from_my_ovp(src: %o)\", src)\n  API.response().then(({ok, err})=> {\n    if (ok)  return video.emit(APIEvents.OK, ok)\n    if (err) return video.emit(APIEvents.ERR, err)\n    throw new Error(\"unhandled case in load_from_my_ovp()\\nthis should never happen\")\n  })\n}","import {my_loader, MY_CUSTOM_TYPE} from \"./loader\"\n\nflowplayer(my_loader)\n\nconst my_ovp_src =\n  { src  : \"some-fake-id\"\n  , type : MY_CUSTOM_TYPE\n  }\n\nflowplayer(\"#player\", \n  { src   : [my_ovp_src]\n  , token : process.env.TOKEN\n  })"]}